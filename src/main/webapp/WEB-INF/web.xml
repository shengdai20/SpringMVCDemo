<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
	http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">
	
  <display-name>Spring MVC Study</display-name>
	<!-- Spring应用上下文，理解层次化的ApplicationContext -->
	<context-param>
 		<param-name>contextConfigLocation</param-name>
 		<!-- Spring自己的配置文件 -->
		<param-value>/WEB-INF/configs/spring/applicationContext*.xml</param-value>
  </context-param>
  
  <listener>
		<listener-class>
			org.springframework.web.context.ContextLoaderListener
		</listener-class>
  </listener>
  
  <!-- 利用下面的servlet和servlet-mapping标签将前端控制器配置到web中， -->
	<servlet>
		<servlet-name>mvc-dispatcher</servlet-name>
		<servlet-class> org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- DispatcherServlet对应的上下文配置， 默认为/WEB-INF/$servlet-name$-servlet.xml
		 如果没有init-param，则会默认加载上述的默认配置文件-->
		<init-param>
          <param-name>contextConfigLocation</param-name>
          <!-- 在/WEB-INF/相应目录下创建如下的xml文件 -->
          <param-value>/WEB-INF/configs/spring/mvc-dispatcher-servlet.xml</param-value>
        </init-param>
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
	<!-- 这里的servlet-name与上面的servlet标签里的servlet-name保持一致 -->
		<servlet-name>mvc-dispatcher</servlet-name>
	    <!-- mvc-dispatcher拦截所有的请求-->
	    <!-- 这里url-pattern指定了不同url来源的依据 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
</web-app>
